[{"D:\\Documents\\GitHub\\note-flow\\src\\index.js":"1","D:\\Documents\\GitHub\\note-flow\\src\\reportWebVitals.js":"2","D:\\Documents\\GitHub\\note-flow\\src\\App.js":"3","D:\\Documents\\GitHub\\note-flow\\src\\components\\Firebase\\index.js":"4","D:\\Documents\\GitHub\\note-flow\\src\\components\\navigation\\Navigation.js":"5","D:\\Documents\\GitHub\\note-flow\\src\\components\\editor\\Editor.js":"6","D:\\Documents\\GitHub\\note-flow\\src\\components\\Firebase\\context.js":"7","D:\\Documents\\GitHub\\note-flow\\src\\components\\Firebase\\firebase.js":"8","D:\\Documents\\GitHub\\note-flow\\src\\components\\navigation\\routes.js":"9","D:\\Documents\\GitHub\\note-flow\\src\\components\\toolbar\\Toolbar.js":"10"},{"size":792,"mtime":1612133527285,"results":"11","hashOfConfig":"12"},{"size":375,"mtime":1612133527285,"results":"13","hashOfConfig":"12"},{"size":641,"mtime":1612133527278,"results":"14","hashOfConfig":"12"},{"size":136,"mtime":1612133527280,"results":"15","hashOfConfig":"12"},{"size":513,"mtime":1612133527282,"results":"16","hashOfConfig":"12"},{"size":1123,"mtime":1612133527281,"results":"17","hashOfConfig":"12"},{"size":211,"mtime":1612133527279,"results":"18","hashOfConfig":"12"},{"size":638,"mtime":1612133527280,"results":"19","hashOfConfig":"12"},{"size":295,"mtime":1612133527282,"results":"20","hashOfConfig":"12"},{"size":18680,"mtime":1612737660607,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1j2kmph",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},"D:\\Documents\\GitHub\\note-flow\\src\\index.js",[],["44","45"],"D:\\Documents\\GitHub\\note-flow\\src\\reportWebVitals.js",[],"D:\\Documents\\GitHub\\note-flow\\src\\App.js",[],"D:\\Documents\\GitHub\\note-flow\\src\\components\\Firebase\\index.js",[],"D:\\Documents\\GitHub\\note-flow\\src\\components\\navigation\\Navigation.js",[],"D:\\Documents\\GitHub\\note-flow\\src\\components\\editor\\Editor.js",[],"D:\\Documents\\GitHub\\note-flow\\src\\components\\Firebase\\context.js",[],"D:\\Documents\\GitHub\\note-flow\\src\\components\\Firebase\\firebase.js",[],"D:\\Documents\\GitHub\\note-flow\\src\\components\\navigation\\routes.js",[],"D:\\Documents\\GitHub\\note-flow\\src\\components\\toolbar\\Toolbar.js",["46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66"],"import React from 'react'\r\nimport './Toolbar.css'\r\n\r\nimport Icon from 'react-icons-kit'\r\nimport { bold } from 'react-icons-kit/iconic/bold'\r\nimport { italic } from 'react-icons-kit/iconic/italic'\r\nimport { list } from 'react-icons-kit/iconic/list'\r\nimport { link } from 'react-icons-kit/iconic/link'\r\nimport { check } from 'react-icons-kit/iconic/check'\r\nimport { header } from 'react-icons-kit/iconic/header'\r\nimport { code } from 'react-icons-kit/iconic/code'\r\nimport { plus } from 'react-icons-kit/iconic/plus'\r\nimport { download } from 'react-icons-kit/iconic/download'\r\n\r\nimport { MathfieldComponent } from 'react-mathlive'\r\nimport Mathlive from 'mathlive'\r\nimport { Mathfield, MathfieldElement } from 'mathlive'\r\n \r\n//imports for CodeBlock\r\nimport * as ace from 'ace-builds/src-noconflict/ace';\r\nimport 'ace-builds/src-min-noconflict/theme-tomorrow_night_eighties';\r\nimport 'ace-builds/src-min-noconflict/mode-javascript';\r\nimport 'ace-builds/src-min-noconflict/mode-java';\r\nimport 'ace-builds/src-min-noconflict/mode-c_cpp';\r\nimport 'ace-builds/src-min-noconflict/mode-python';\r\nimport $ from \"jquery\";\r\n\r\n\r\n\r\nexport default function Toolbar() {\r\n\r\n    \r\n    function format(com, val) {\r\n        document.getElementById('editor').focus();\r\n        document.execCommand(com, false, val);\r\n    }\r\n\r\n    //Sets the url input box to shown or hidden\r\n    function addLink() {\r\n        const show = document.getElementById('url-input');\r\n        if (show.classList.contains('hidden')) {\r\n            show.classList.remove('hidden');\r\n        } else {\r\n            show.classList.add('hidden');\r\n        }\r\n    }\r\n\r\n    function setUrl() {\r\n        //Stores the input from the url box into inputVal\r\n        var inputVal = document.getElementById('textFormatUrl').value;\r\n        \r\n        //Text is used for creating a hyperlink\r\n        const text = document.getSelection();\r\n        \r\n        //used for showing or hiding url input box\r\n        const show = document.getElementById('url-input');\r\n        if(inputVal.substr(0,1) === \" \"){\r\n            inputVal = inputVal.substr(1);\r\n        }\r\n        //Appends http:// to the url if the input did not have it to begin with\r\n        var prefix1 = 'http://';\r\n        var prefix2 = 'https://';\r\n        if ((inputVal.substr(0, prefix1.length) !== prefix1) && (inputVal.substr(0, prefix2.length) !== prefix2)){\r\n            \r\n            inputVal = prefix2 + inputVal;\r\n        }\r\n        \r\n        /**\r\n         * This block handles url insert. text.baseNode.data==undefined checks to see if the user\r\n         * is trying to insert only a url and NOT create a hyper link.  Else handles creating the hyperlink.\r\n         * A hyperlink is created by first clicking the url button, then paste your url in the input box,\r\n         * then highlight the text you want to turn into a hyperlink and then press the check mark button. \r\n         */\r\n        if (text.baseNode.data == undefined) {\r\n            format(\r\n                'insertHTML', `<a href='${inputVal}' target='_blank'>${inputVal}</a>`\r\n            );\r\n        } else {\r\n            format(\r\n                'insertHTML', `<a href='${inputVal}' target='_blank'>${text}</a>`\r\n            );\r\n        }\r\n\r\n        //This makes the url input tag blank again. I could use \"\" or '' but JS thinks strings are the same as null\r\n        document.getElementById('textFormatUrl').value = \" \";\r\n\r\n        //hides the input tag again \r\n        show.classList.add('hidden');\r\n    }\r\n\r\n    function setHeader() {\r\n        const target = document.getSelection();\r\n        format('insertHTML', `<h2>${target}</h2>`);\r\n    }\r\n\r\n    ////////////////////////////////////////\r\n    //Vito is working on this\r\n    var lang=\"\";\r\n\r\n    //openmenu for code block\r\n    function openMenu() {\r\n        document.getElementById(\"dropdown\").classList.toggle(\"active\");\r\n    }\r\n\r\n    //update language for code block\r\n    function updateLang(id){\r\n        lang=id;\r\n        return lang;\r\n    }\r\n\r\n    //Main function to create new code block\r\n    function addCodeBlock() {\r\n        //creating new filled div\r\n        var next_line = document.getElementById('editor');\r\n        if(lang==\"\"){\r\n            lang=\"javascript\";\r\n        }\r\n        alert(\" Language chosen for codeblock is: \"+lang);\r\n        format(\r\n            'insertParagraph',\r\n            `<pre class='editor' id='${next_line}'</pre>`\r\n        );\r\n        const codeBlock = document.createElement('pre');\r\n        const target = document.getSelection();\r\n        /*if (\r\n            target.focusNode.nodeName.includes('#text') ||\r\n            target.focusNode.classList.contains('title') ||\r\n            target.focusNode.className.includes('codeBlock')\r\n        ) {\r\n            return\r\n        }*/\r\n        const id = `codeBlock-${document.getElementsByClassName('codeBlock').length + 1}`;\r\n        //codeBlock.classList.add('codeBlock')\r\n\r\n        var new_block = format(\r\n            'insertHTML',\r\n            `<pre class='codeBlock' id='${id}'>${target}</pre>`\r\n        );\r\n        //Embbedding Ace editor\r\n        var mode_name = \"ace/mode/\"+lang;\r\n        \r\n        var code_editor = ace.edit(id, {\r\n            theme: \"ace/theme/tomorrow_night_eighties\",\r\n            mode: mode_name,\r\n            maxLines: 30,\r\n            wrap: true,\r\n            autoScrollEditorIntoView: true,\r\n            enableBasicAutocompletion: true,\r\n            enableLiveAutocompletion: true,\r\n        });\r\n\r\n        addLineAfterBlock(id);\r\n    }\r\n\r\n    \r\n    //experimenting to fix a dumb bug when trying to delete the code block\r\n    function deleteBlock(){\r\n        const codeBlock = document.getElementsByTagName(\"pre\");\r\n        const target = document.getSelection();\r\n        \r\n        \r\n        const id='';\r\n        $(document).ready(function(){\r\n            $(document).click(function(){\r\n            \r\n            });\r\n        });\r\n        \r\n        const code_editor=ace.edit(id);\r\n        code_editor.destroy();\r\n        code_editor.container.remove();\r\n    }\r\n    \r\n    function addLineAfterBlock(id) {\r\n        const block = document.getElementById(`${id}`);\r\n        const div = document.createElement('div');\r\n        const br = document.createElement('br');\r\n\r\n        div.appendChild(br);\r\n        if (!block) {\r\n            return;\r\n        } else {\r\n            block.after(div);\r\n        }\r\n    }\r\n    ////////////////////////////////////////////////////////\r\n\r\n    //Emily working on this. Uses the Mathlive library and API\r\n    function addEquation() {\r\n\r\n        //Focus on editor, insert line\r\n        document.getElementById('editor').focus();\r\n        var next_line = document.getElementById('editor');\r\n        format(\r\n            'insert',\r\n            `<pre class='editor' id='${next_line}'</pre>`\r\n        );\r\n\r\n        //Create new math block element\r\n        const mathBlock = new MathfieldElement();\r\n\r\n        //set initial value and options. Changing this will\r\n        //change what the initial math equation looks like upon adding\r\n        //Currently empty\r\n        mathBlock.setValue(\"\");\r\n\r\n        //Chunk of code setting math block options and attributes\r\n        mathBlock.setOptions({\r\n            virtualKeyboardMode: \"off\",\r\n            //virtualKeyboards: \"all\",\r\n            //virtualKeyboardTheme: \"\",\r\n            //virtualKeyboardLayout: \"auto\",\r\n            //virtualKeyboardToolbarOptions: \"default\",\r\n            smartMode: true,\r\n            smartFence: true,\r\n            resetStyle: true,\r\n            selectionMode: \"beforeendr\",\r\n        });\r\n        mathBlock.setAttribute(\"resetStyle\", \"true\");\r\n        mathBlock.setAttribute(\"id\",\r\n            `mathBlock-${document.getElementsByClassName('mathBlock').length + 1}`);\r\n        const id = mathBlock.id;\r\n        mathBlock.setAttribute(\"class\", 'mathBlock');\r\n\r\n        //Added event listener for when you exit out of math block using arrow\r\n        //key\r\n        mathBlock.addEventListener('focus-out', (ev) => {\r\n            if (ev.detail.direction == \"forward\") {\r\n\r\n                document.getElementById('editor').focus();\r\n                var next_line = document.getElementById('editor');\r\n                format(\r\n                    'insert',\r\n                    `<pre class='editor' id='${next_line}'</pre>`\r\n                );\r\n            } else if (ev.detail.direction == \"backward\") {\r\n                document.getElementById('editor').focus();\r\n            }\r\n        });\r\n\r\n        //Event Listener to change math block value when there is user input\r\n        mathBlock.addEventListener('input', (ev) => {\r\n            mathBlock.setValue(ev.target.value);\r\n        })\r\n\r\n        const target = document.getSelection();\r\n\r\n        //Checking if valid location to place a math block\r\n        if (\r\n            target.focusNode.nodeName.includes('#text') ||\r\n            target.focusNode.classList.contains('title') ||\r\n            target.focusNode.className.includes('mathBlock')\r\n        ) {\r\n            return\r\n        }\r\n\r\n        //Focuses back on editor, and then inserts a block at\r\n        //the cursor using added function insertBlockAtCursor\r\n        const ellie = document.getElementById('editor');\r\n        document.getElementById('editor').focus();\r\n        insertBlockAtCursor(mathBlock, target);\r\n\r\n        /*\r\n            //Block of comments to test out different methods of inserting\r\n            //blocks and text elements\r\n\r\n            //const texty = document.createTextNode(\"hello world!\");\r\n            //const spanny = document.createElement('span');\r\n            //const t = document.createTextNode(\"This is a span element\");\r\n            //spanny.appendChild(t);\r\n            //ellie.appendChild(spanny);\r\n            //document.body.appendChild(spanny);\r\n            //insertTextAtCaret(spanny);\r\n\r\n        */\r\n        document.getElementById(id).focus();\r\n        /* Original format/executeCommand function. Does not appear to\r\n            be functional in the context of a <math-field> element\r\n        format('insert',\r\n                    `<pre class=\"mathBlock\" id=\"${id}\">${target}</pre>`\r\n                );\r\n        */\r\n\r\n        //If you comment out this line suddenly allows text editing to\r\n        //the right of the math field. Will hold off on text to side of\r\n        //until inline equation is figured out\r\n        addLineAfterBlock(id);\r\n\r\n    }\r\n\r\n\r\n    //Method to handle Tab and Enter button press (Emily)\r\n    function keyHandle(evt) {\r\n        const key = evt.keyCode;\r\n        switch (key) {\r\n            case 9: //Tab\r\n                insertTextAtCursor('\\t');\r\n                evt.preventDefault();\r\n                break;\r\n            case 13: //Enter\r\n                insertTextAtCursor('\\n');\r\n                evt.preventDefault();\r\n                break;\r\n        }\r\n    }\r\n\r\n    //Inserts text block at current cursor position (Emily)\r\n    function insertTextAtCursor(text) {\r\n        var sel, range;\r\n        sel = window.getSelection();\r\n        range = sel.getRangeAt(0);\r\n        range.deleteContents();\r\n        range.insertNode(document.createTextNode(text));\r\n    }\r\n\r\n    //Inserts an inline-block element at current cursor position (Emily)\r\n    function insertBlockAtCursor(block, target) {\r\n        var range;\r\n        range = target.getRangeAt(0);\r\n        range.deleteContents();\r\n        range.insertNode(block);\r\n    }\r\n\r\n    //Experiment method to perform a different text insertion at cursor (Emily)\r\n    function insertTextAtCaret(text) {\r\n        var sel, range;\r\n        if (window.getSelection) {\r\n            sel = window.getSelection();\r\n            if (sel.getRangeAt && sel.rangeCount) {\r\n                range = sel.getRangeAt(0);\r\n                range.deleteContents();\r\n                range.insertNode(document.createTextNode(text));\r\n            }\r\n        } else if (document.selection && document.selection.createRange) {\r\n            document.selection.createRange().text = text;\r\n        }\r\n    }\r\n\r\n    //Save selection before you insert an element (Emily)\r\n    function saveSelection(sel) {\r\n        if (window.getSelection) {\r\n            sel = window.getSelection();\r\n            if (sel.getRangeAt && sel.rangeCount) {\r\n                return sel.getRangeAt(0);\r\n            }\r\n        } else if (document.selection && document.selection.createRange) {\r\n            return document.selection.createRange();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    //Restore the previously saved selection (Emily)\r\n    function restoreSelection(range, sel) {\r\n        if (range) {\r\n            if (window.getSelection) {\r\n                sel = window.getSelection();\r\n                sel.removeAllRanges();\r\n                sel.addRange(range);\r\n            } else if (document.selection && range.select) {\r\n                range.select();\r\n            }\r\n        }\r\n    }\r\n\r\n    //Insert HTML directly at caret position. Basically another\r\n    //experimental method to test out insertion of elements at\r\n    //cursor in doc (Emily)\r\n    function pasteHtmlAtCaret(html, selectPastedContent) {\r\n        var sel, range;\r\n        if (window.getSelection) {\r\n            // IE9 and non-IE\r\n            sel = window.getSelection();\r\n            if (sel.getRangeAt && sel.rangeCount) {\r\n                range = sel.getRangeAt(0);\r\n                range.deleteContents();\r\n\r\n                // Range.createContextualFragment() would be useful here but is\r\n                // only relatively recently standardized and is not supported in\r\n                // some browsers (IE9, for one)\r\n                var el = document.createElement(\"div\");\r\n                el.innerHTML = html;\r\n                var frag = document.createDocumentFragment(), node, lastNode;\r\n                while ((node = el.firstChild)) {\r\n                    lastNode = frag.appendChild(node);\r\n                }\r\n                var firstNode = frag.firstChild;\r\n                range.insertNode(frag);\r\n\r\n                // Preserve the selection\r\n                if (lastNode) {\r\n                    range = range.cloneRange();\r\n                    range.setStartAfter(lastNode);\r\n                    if (selectPastedContent) {\r\n                        range.setStartBefore(firstNode);\r\n                    } else {\r\n                        range.collapse(true);\r\n                    }\r\n                    sel.removeAllRanges();\r\n                    sel.addRange(range);\r\n                }\r\n            }\r\n        } else if ((sel = document.selection) && sel.type != \"Control\") {\r\n            // IE < 9\r\n            var originalRange = sel.createRange();\r\n            originalRange.collapse(true);\r\n            sel.createRange().pasteHTML(html);\r\n            if (selectPastedContent) {\r\n                range = sel.createRange();\r\n                range.setEndPoint(\"StartToStart\", originalRange);\r\n                range.select();\r\n            }\r\n        }\r\n    }\r\n\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n    //\r\n\r\n\r\n\r\n    //Temporary code for storing title and content into a txt file\r\n    function handleSave() {\r\n        const content = document.getElementById('editor').innerHTML;\r\n        const title = document.getElementById('title').textContent;\r\n\r\n        let data =\r\n            '\\r' + title + ' \\r\\n' +\r\n            '\\r\\n' + content + ' \\r\\n';\r\n        const textToBLOB = new Blob([data], { type: 'text/plain' });\r\n        const sFileName = 'noteOutput.txt';\r\n\r\n        let newLink = document.createElement(\"a\");\r\n        newLink.download = sFileName;\r\n        if (window.webkitURL != null) {\r\n            newLink.href = window.webkitURL.createObjectURL(textToBLOB);\r\n        }\r\n        else {\r\n            newLink.href = window.URL.createObjectURL(textToBLOB);\r\n            newLink.style.display = \"none\";\r\n            document.body.appendChild(newLink);\r\n        }\r\n\r\n        newLink.click();\r\n    }\r\n    function bulletPoint(){\r\n        format('insertHTML',`<ol><li class=\"bullet\"></li></ol>`);\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className='toolbar'>\r\n            <div class=\"tooltip\">\r\n                <span class=\"tooltiptext\">Bold</span>\r\n                <button onClick={e => format('bold')}>\r\n                    <Icon icon={bold} />\r\n                </button>\r\n            </div>\r\n            <div class=\"tooltip\">\r\n                <span class=\"tooltiptext\">Italicize</span>\r\n                <button onClick={e => format('italic')}>\r\n                    <Icon icon={italic} />\r\n                </button>\r\n            </div>\r\n            <div class=\"tooltip\">\r\n                <span class=\"tooltiptext\">List</span>\r\n                <button onClick={e => bulletPoint()}>\r\n                    <Icon icon={list} />\r\n                </button>\r\n            </div>\r\n            <div class=\"tooltip\">\r\n                <span class=\"tooltiptext\">Hyperlink</span>\r\n                <button onClick={e => addLink()}>\r\n                    <Icon icon={link} />\r\n                </button>\r\n            </div>\r\n\r\n            <div id='url-input' className='hidden'>\r\n                <input id='textFormatUrl' placeholder='url' />\r\n                <button onClick={e => setUrl(e)}>\r\n                    <Icon icon={check} />\r\n                </button>\r\n            </div>\r\n            <div class=\"tooltip\">\r\n                <span class=\"tooltiptext\">Header</span>\r\n                <button onClick={e => setHeader()}>\r\n                    <Icon icon={header} />\r\n                </button>\r\n            </div>\r\n            <div class=\"tooltip\">\r\n                <span class=\"tooltiptext\">Code Block</span>\r\n                <button onClick={e => addCodeBlock(lang)}>\r\n                    <Icon icon={code} />\r\n                </button>\r\n            </div>\r\n            <div class=\"tooltip\">\r\n                <span class=\"tooltiptext\">Equation</span>\r\n                <button onClick={e => addEquation()}>\r\n                    <Icon icon={plus} />\r\n                </button>\r\n            </div>\r\n            <div class=\"tooltip\">\r\n                <span class=\"tooltiptext\">Save</span>\r\n                <button onClick={e => handleSave()}>\r\n                    <Icon icon={download} />\r\n                </button>\r\n            </div>\r\n            <button onClick={e => openMenu()}>\r\n                Language for CodeBlock\r\n                <ul id=\"dropdown\">\r\n                    <li onClick={e => updateLang(\"javascript\")} >Javascript</li>\r\n                    <li onClick={e => updateLang(\"java\")}>Java</li>\r\n                    <li onClick={e => updateLang(\"python\")}>Python</li>\r\n                    <li onClick={e => updateLang(\"c_cpp\")}>C++</li>\r\n                </ul>\r\n            </button>\r\n            \r\n        </div>\r\n    )\r\n}",{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":15,"column":10,"nodeType":"73","messageId":"74","endLine":15,"endColumn":28},{"ruleId":"71","severity":1,"message":"75","line":16,"column":8,"nodeType":"73","messageId":"74","endLine":16,"endColumn":16},{"ruleId":"71","severity":1,"message":"76","line":17,"column":10,"nodeType":"73","messageId":"74","endLine":17,"endColumn":19},{"ruleId":"77","severity":1,"message":"78","line":74,"column":32,"nodeType":"79","messageId":"80","endLine":74,"endColumn":34},{"ruleId":"77","severity":1,"message":"78","line":115,"column":16,"nodeType":"79","messageId":"80","endLine":115,"endColumn":18},{"ruleId":"71","severity":1,"message":"81","line":123,"column":15,"nodeType":"73","messageId":"74","endLine":123,"endColumn":24},{"ruleId":"71","severity":1,"message":"82","line":135,"column":13,"nodeType":"73","messageId":"74","endLine":135,"endColumn":22},{"ruleId":"71","severity":1,"message":"83","line":142,"column":13,"nodeType":"73","messageId":"74","endLine":142,"endColumn":24},{"ruleId":"71","severity":1,"message":"84","line":157,"column":14,"nodeType":"73","messageId":"74","endLine":157,"endColumn":25},{"ruleId":"71","severity":1,"message":"81","line":158,"column":15,"nodeType":"73","messageId":"74","endLine":158,"endColumn":24},{"ruleId":"71","severity":1,"message":"85","line":159,"column":15,"nodeType":"73","messageId":"74","endLine":159,"endColumn":21},{"ruleId":"77","severity":1,"message":"78","line":228,"column":37,"nodeType":"79","messageId":"80","endLine":228,"endColumn":39},{"ruleId":"77","severity":1,"message":"78","line":236,"column":44,"nodeType":"79","messageId":"80","endLine":236,"endColumn":46},{"ruleId":"71","severity":1,"message":"86","line":259,"column":15,"nodeType":"73","messageId":"74","endLine":259,"endColumn":20},{"ruleId":"71","severity":1,"message":"87","line":293,"column":14,"nodeType":"73","messageId":"74","endLine":293,"endColumn":23},{"ruleId":"88","severity":1,"message":"89","line":295,"column":9,"nodeType":"90","messageId":"91","endLine":304,"endColumn":10},{"ruleId":"71","severity":1,"message":"92","line":325,"column":14,"nodeType":"73","messageId":"74","endLine":325,"endColumn":31},{"ruleId":"71","severity":1,"message":"93","line":340,"column":14,"nodeType":"73","messageId":"74","endLine":340,"endColumn":27},{"ruleId":"71","severity":1,"message":"94","line":353,"column":14,"nodeType":"73","messageId":"74","endLine":353,"endColumn":30},{"ruleId":"71","severity":1,"message":"95","line":368,"column":14,"nodeType":"73","messageId":"74","endLine":368,"endColumn":30},{"ruleId":"77","severity":1,"message":"96","line":402,"column":59,"nodeType":"79","messageId":"80","endLine":402,"endColumn":61},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"no-unused-vars","'MathfieldComponent' is defined but never used.","Identifier","unusedVar","'Mathlive' is defined but never used.","'Mathfield' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'codeBlock' is assigned a value but never used.","'new_block' is assigned a value but never used.","'code_editor' is assigned a value but never used.","'deleteBlock' is defined but never used.","'target' is assigned a value but never used.","'ellie' is assigned a value but never used.","'keyHandle' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'insertTextAtCaret' is defined but never used.","'saveSelection' is defined but never used.","'restoreSelection' is defined but never used.","'pasteHtmlAtCaret' is defined but never used.","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]