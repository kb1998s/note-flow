[{"/home/maslin/Documents/School/CS380/Project/note-flow/src/index.js":"1","/home/maslin/Documents/School/CS380/Project/note-flow/src/reportWebVitals.js":"2","/home/maslin/Documents/School/CS380/Project/note-flow/src/App.js":"3","/home/maslin/Documents/School/CS380/Project/note-flow/src/components/Firebase/index.js":"4","/home/maslin/Documents/School/CS380/Project/note-flow/src/components/editorpage.js":"5","/home/maslin/Documents/School/CS380/Project/note-flow/src/components/homepage.js":"6","/home/maslin/Documents/School/CS380/Project/note-flow/src/components/signinpage.js":"7","/home/maslin/Documents/School/CS380/Project/note-flow/src/components/notfound.js":"8","/home/maslin/Documents/School/CS380/Project/note-flow/src/components/signuppage.js":"9","/home/maslin/Documents/School/CS380/Project/note-flow/src/components/Firebase/context.js":"10","/home/maslin/Documents/School/CS380/Project/note-flow/src/components/Firebase/firebase.js":"11","/home/maslin/Documents/School/CS380/Project/note-flow/src/components/Navigation/index.js":"12","/home/maslin/Documents/School/CS380/Project/note-flow/src/components/editor/Editor.js":"13","/home/maslin/Documents/School/CS380/Project/note-flow/src/components/SignIn/index.js":"14","/home/maslin/Documents/School/CS380/Project/note-flow/src/components/SignUp/index.js":"15","/home/maslin/Documents/School/CS380/Project/note-flow/src/components/toolbar/Toolbar.js":"16","/home/maslin/Documents/School/CS380/Project/note-flow/src/components/SignOut/index.js":"17"},{"size":764,"mtime":1613008166137,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1612231437880,"results":"20","hashOfConfig":"19"},{"size":1640,"mtime":1613008166133,"results":"21","hashOfConfig":"19"},{"size":164,"mtime":1612995720696,"results":"22","hashOfConfig":"19"},{"size":223,"mtime":1613008166133,"results":"23","hashOfConfig":"19"},{"size":226,"mtime":1613008166133,"results":"24","hashOfConfig":"19"},{"size":354,"mtime":1613008166133,"results":"25","hashOfConfig":"19"},{"size":155,"mtime":1613008166133,"results":"26","hashOfConfig":"19"},{"size":329,"mtime":1613008166133,"results":"27","hashOfConfig":"19"},{"size":419,"mtime":1613008166133,"results":"28","hashOfConfig":"19"},{"size":1305,"mtime":1613008166133,"results":"29","hashOfConfig":"19"},{"size":1441,"mtime":1613008166133,"results":"30","hashOfConfig":"19"},{"size":1084,"mtime":1613008166133,"results":"31","hashOfConfig":"19"},{"size":1927,"mtime":1613008166133,"results":"32","hashOfConfig":"19"},{"size":2552,"mtime":1613008166133,"results":"33","hashOfConfig":"19"},{"size":18162,"mtime":1613008166137,"results":"34","hashOfConfig":"19"},{"size":492,"mtime":1613008166133,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"sq7z4w",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/maslin/Documents/School/CS380/Project/note-flow/src/index.js",[],["75","76"],"/home/maslin/Documents/School/CS380/Project/note-flow/src/reportWebVitals.js",[],"/home/maslin/Documents/School/CS380/Project/note-flow/src/App.js",[],"/home/maslin/Documents/School/CS380/Project/note-flow/src/components/Firebase/index.js",[],"/home/maslin/Documents/School/CS380/Project/note-flow/src/components/editorpage.js",[],"/home/maslin/Documents/School/CS380/Project/note-flow/src/components/homepage.js",[],"/home/maslin/Documents/School/CS380/Project/note-flow/src/components/signinpage.js",[],"/home/maslin/Documents/School/CS380/Project/note-flow/src/components/notfound.js",[],"/home/maslin/Documents/School/CS380/Project/note-flow/src/components/signuppage.js",[],"/home/maslin/Documents/School/CS380/Project/note-flow/src/components/Firebase/context.js",[],"/home/maslin/Documents/School/CS380/Project/note-flow/src/components/Firebase/firebase.js",["77"],"import app from 'firebase/app';\nimport firebase from 'firebase/app'\nimport 'firebase/auth';\n\n/*\nImplementation of Firebase connectivity. \nWe can define the config function in an .env file later so we can add it\nto our gitinore file so our credentials aren't exposed. \n*/\n\nconst config = {\n    apiKey: \"AIzaSyBOL0tgT4Kj73E67Y7IhLVw7x2OXU7yyDA\",\n    authDomain: \"note-flow-60166.firebaseapp.com\",\n    projectId: \"note-flow-60166\",\n    storageBucket: \"note-flow-60166.appspot.com\",\n    messagingSenderId: \"229776630736\",\n    appId: \"1:229776630736:web:14b929733fa37c629ecfd5\",\n    measurementId: \"G-B2S22DDZTV\"\n  };\n\n  class Firebase{\n      constructor(){\n    \n\n           \n          app.initializeApp(config);\n          this.auth = app.auth();\n        \n      \n      }//constructor\n    \n\n    // *** Auth API ***\n     doCreateUserWithEmailAndPassword = (email, password) =>\n     this.auth.createUserWithEmailAndPassword(email, password);\n\n     doSignInWithEmailAndPassword = (email, password) =>\n     this.auth.signInWithEmailAndPassword(email, password);\n\n     doSignOut = () => this.auth.signOut();\n\n     doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n \n     doPasswordUpdate = password =>\n       this.auth.currentUser.updatePassword(password);\n\n \n\n}//class\n\n  export default Firebase;\n","/home/maslin/Documents/School/CS380/Project/note-flow/src/components/Navigation/index.js",[],"/home/maslin/Documents/School/CS380/Project/note-flow/src/components/editor/Editor.js",[],"/home/maslin/Documents/School/CS380/Project/note-flow/src/components/SignIn/index.js",["78","79"],"import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { FirebaseContext } from '../Firebase';\n\nimport { SignUpLink } from '../SignUp';\nimport { withFirebase } from '../Firebase';\n\n\n//implementation of sign in functionality\n//succesfull sign in will send you to the editor component\n\nconst SignIn = () => (\n  <div>\n    \n \n     <SignInForm  />\n     \n \n  </div>\n);\n \nconst INITIAL_STATE = {\n  email: '',\n  password: '',\n  error: null,\n};\n \nclass SignInFormBase extends Component {\n  constructor(props) {\n    super(props);\n \n    this.state = { ...INITIAL_STATE };\n  }\n \n  onSubmit = event => {\n    const { email, password } = this.state;\n \n    this.props.firebase\n      .doSignInWithEmailAndPassword(email, password)\n      .then(() => {\n        this.setState({ ...INITIAL_STATE });\n\n        //Successful sign in will send user to editor page for now\n        this.props.history.push(\"/editor\");\n      })\n      .catch(error => {\n        this.setState({ error });\n      });\n \n    event.preventDefault();\n  };\n \n  onChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n \n  render() {\n    const { email, password, error } = this.state;\n \n    const isInvalid = password === '' || email === '';\n \n    return (\n      <form onSubmit={this.onSubmit}>\n        <input\n          name=\"email\"\n          value={email}\n          onChange={this.onChange}\n          type=\"text\"\n          placeholder=\"Email Address\"\n        />\n        <input\n          name=\"password\"\n          value={password}\n          onChange={this.onChange}\n          type=\"password\"\n          placeholder=\"Password\"\n        />\n        <button disabled={isInvalid} type=\"submit\">\n          Sign In\n        </button>\n \n        {error && <p>{error.message}</p>}\n      </form>\n    );\n  }\n \n}\n\nconst SignInForm = withRouter(withFirebase(SignInFormBase));\n\nexport default SignIn;\n \nexport { SignInForm };","/home/maslin/Documents/School/CS380/Project/note-flow/src/components/SignUp/index.js",["80"],"import React, { Component } from 'react';\nimport { NavLink, withRouter } from 'react-router-dom';\n\nimport { withFirebase } from '../Firebase';\n\n//implementation of sign up functionality\n//successfull sign up will take you to the homepage\n\nconst SignUp = () => (\n  <div>\n   \n     <SignUpForm />\n    \n  </div>\n);\n\nconst INITIAL_STATE = {\n    username: '',\n    email: '',\n    passwordOne: '',\n    passwordTwo: '',\n    error: null,\n  };\n \nclass SignUpFormBase extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { ...INITIAL_STATE };\n  }\n \n  onSubmit = event => {\n    const { username, email, passwordOne } = this.state;\n \n    this.props.firebase\n      .doCreateUserWithEmailAndPassword(email, passwordOne)\n      .then(authUser => {\n        this.setState({ ...INITIAL_STATE });\n        //redirects user after a successful sign-in back to the home page\n        this.props.history.push(\"/\");\n      })\n      .catch(error => {\n        this.setState({ error });\n      });\n \n    event.preventDefault();\n \n  }\n \n  \n  onChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n \n  render() {\n    const {\n        username,\n        email,\n        passwordOne,\n        passwordTwo,\n        error,\n      } = this.state;\n\n    const isInvalid =\n    passwordOne !== passwordTwo ||\n    passwordOne === '' ||\n    email === '' ||\n    username === '';\n\n    return (\n      <form onSubmit={this.onSubmit}>\n         <input\n          name=\"username\"\n          value={username}\n          onChange={this.onChange}\n          type=\"text\"\n          placeholder=\"Full Name\"\n        />\n        <input\n          name=\"email\"\n          value={email}\n          onChange={this.onChange}\n          type=\"text\"\n          placeholder=\"Email Address\"\n        />\n        <input\n          name=\"passwordOne\"\n          value={passwordOne}\n          onChange={this.onChange}\n          type=\"password\"\n          placeholder=\"Password\"\n        />\n        <input\n          name=\"passwordTwo\"\n          value={passwordTwo}\n          onChange={this.onChange}\n          type=\"password\"\n          placeholder=\"Confirm Password\"\n        />\n        <button disabled={isInvalid} type = \"submit\">Sign Up </button>\n \n        {error && <p>{error.message}</p>}\n      </form>\n    );\n  }\n}\n \nconst SignUpLink = () => (\n  <p>\n    Don't have an account? <NavLink  activeClassName=\"active\" to=\"/signuppage\">Sign Up</NavLink>\n  </p>\n);\n\nconst SignUpForm = withRouter(withFirebase(SignUpFormBase));\n \nexport default SignUp;\n \nexport { SignUpForm, SignUpLink };","/home/maslin/Documents/School/CS380/Project/note-flow/src/components/toolbar/Toolbar.js",["81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96"],"import React from 'react'\nimport './Toolbar.css'\n\nimport Icon from 'react-icons-kit'\nimport { bold } from 'react-icons-kit/iconic/bold'\nimport { italic } from 'react-icons-kit/iconic/italic'\nimport { list } from 'react-icons-kit/iconic/list'\nimport { link } from 'react-icons-kit/iconic/link'\nimport { check } from 'react-icons-kit/iconic/check'\nimport { header } from 'react-icons-kit/iconic/header'\nimport { code } from 'react-icons-kit/iconic/code'\nimport { plus } from 'react-icons-kit/iconic/plus'\nimport { download } from 'react-icons-kit/iconic/download'\n\nimport { MathfieldComponent } from 'react-mathlive'\nimport Mathlive from 'mathlive'\nimport { Mathfield, MathfieldElement } from 'mathlive'\n \n//imports for CodeBlock\nimport * as ace from 'ace-builds/src-noconflict/ace';\nimport 'ace-builds/src-min-noconflict/theme-tomorrow_night_eighties';\nimport 'ace-builds/src-min-noconflict/mode-javascript';\nimport 'ace-builds/src-min-noconflict/mode-java';\nimport 'ace-builds/src-min-noconflict/mode-c_cpp';\nimport 'ace-builds/src-min-noconflict/mode-python';\nimport $ from \"jquery\";\n\n\n\nexport default function Toolbar() {\n\n    \n    function format(com, val) {\n        document.getElementById('editor').focus();\n        document.execCommand(com, false, val);\n    }\n\n    //Sets the url input box to shown or hidden\n    function addLink() {\n        const show = document.getElementById('url-input');\n        if (show.classList.contains('hidden')) {\n            show.classList.remove('hidden');\n        } else {\n            show.classList.add('hidden');\n        }\n    }\n\n    function setUrl() {\n        //Stores the input from the url box into inputVal\n        var inputVal = document.getElementById('textFormatUrl').value;\n        \n        //Text is used for creating a hyperlink\n        const text = document.getSelection();\n        \n        //used for showing or hiding url input box\n        const show = document.getElementById('url-input');\n        if(inputVal.substr(0,1) === \" \"){\n            inputVal = inputVal.substr(1);\n        }\n        //Appends http:// to the url if the input did not have it to begin with\n        var prefix1 = 'http://';\n        var prefix2 = 'https://';\n        if ((inputVal.substr(0, prefix1.length) !== prefix1) && (inputVal.substr(0, prefix2.length) !== prefix2)){\n            \n            inputVal = prefix2 + inputVal;\n        }\n        \n        /**\n         * This block handles url insert. text.baseNode.data==undefined checks to see if the user\n         * is trying to insert only a url and NOT create a hyper link.  Else handles creating the hyperlink.\n         * A hyperlink is created by first clicking the url button, then paste your url in the input box,\n         * then highlight the text you want to turn into a hyperlink and then press the check mark button. \n         */\n        if (text.baseNode.data === undefined) {\n            format(\n                'insertHTML', `<a href='${inputVal}' target='_blank'>${inputVal}</a>`\n            );\n        } else {\n            format(\n                'insertHTML', `<a href='${inputVal}' target='_blank'>${text}</a>`\n            );\n        }\n\n        //This makes the url input tag blank again. I could use \"\" or '' but JS thinks strings are the same as null\n        document.getElementById('textFormatUrl').value = \" \";\n\n        //hides the input tag again \n        show.classList.add('hidden');\n    }\n\n    function setHeader() {\n        const target = document.getSelection();\n        format('insertHTML', `<h2>${target}</h2>`);\n    }\n\n    ////////////////////////////////////////\n    //Vito is working on this\n    var lang=\"\";\n\n    //openmenu for code block\n    function openMenu() {\n        document.getElementById(\"dropdown\").classList.toggle(\"active\");\n    }\n\n    //update language for code block\n    function updateLang(id){\n        lang=id;\n        return lang;\n    }\n\n    //Main function to create new code block\n    function addCodeBlock() {\n        //creating new filled div\n        var next_line = document.getElementById('editor');\n        if(lang===\"\"){\n            lang=\"javascript\";\n        }\n        alert(\" Language chosen for codeblock is: \"+lang);\n        format(\n            'insertParagraph',\n            `<pre class='editor' id='${next_line}'</pre>`\n        );\n        const codeBlock = document.createElement('pre');\n        const target = document.getSelection();\n        /*if (\n            target.focusNode.nodeName.includes('#text') ||\n            target.focusNode.classList.contains('title') ||\n            target.focusNode.className.includes('codeBlock')\n        ) {\n            return\n        }*/\n        const id = `codeBlock-${document.getElementsByClassName('codeBlock').length + 1}`;\n        //codeBlock.classList.add('codeBlock')\n\n        var new_block = format(\n            'insertHTML',\n            `<pre class='codeBlock' id='${id}'>${target}</pre>`\n        );\n        //Embbedding Ace editor\n        var mode_name = \"ace/mode/\"+lang;\n        \n        var code_editor = ace.edit(id, {\n            theme: \"ace/theme/tomorrow_night_eighties\",\n            mode: mode_name,\n            maxLines: 30,\n            wrap: true,\n            autoScrollEditorIntoView: true,\n            enableBasicAutocompletion: true,\n            enableLiveAutocompletion: true,\n        });\n\n        addLineAfterBlock(id);\n    }\n\n    \n    //experimenting to fix a dumb bug when trying to delete the code block\n    function deleteBlock(){\n        const codeBlock = document.getElementsByTagName(\"pre\");\n        const target = document.getSelection();\n        \n        \n        const id='';\n        $(document).ready(function(){\n            $(document).click(function(){\n            \n            });\n        });\n        \n        const code_editor=ace.edit(id);\n        code_editor.destroy();\n        code_editor.container.remove();\n    }\n    \n    function addLineAfterBlock(id) {\n        const block = document.getElementById(`${id}`);\n        const div = document.createElement('div');\n        const br = document.createElement('br');\n\n        div.appendChild(br);\n        if (!block) {\n            return;\n        } else {\n            block.after(div);\n        }\n    }\n    ////////////////////////////////////////////////////////\n\n    //Emily working on this. Uses the Mathlive library and API\n    function addEquation() {\n\n        //Focus on editor, insert line\n        document.getElementById('editor').focus();\n        var next_line = document.getElementById('editor');\n        format(\n            'insert',\n            `<pre class='editor' id='${next_line}'</pre>`\n        );\n\n        //Create new math block element\n        const mathBlock = new MathfieldElement();\n\n        //set initial value and options. Changing this will\n        //change what the initial math equation looks like upon adding\n        //Currently empty\n        mathBlock.setValue(\"\");\n\n        //Chunk of code setting math block options and attributes\n        mathBlock.setOptions({\n            virtualKeyboardMode: \"off\",\n            //virtualKeyboards: \"all\",\n            //virtualKeyboardTheme: \"\",\n            //virtualKeyboardLayout: \"auto\",\n            //virtualKeyboardToolbarOptions: \"default\",\n            smartMode: true,\n            smartFence: true,\n            resetStyle: true,\n            selectionMode: \"beforeendr\",\n        });\n        mathBlock.setAttribute(\"resetStyle\", \"true\");\n        mathBlock.setAttribute(\"id\",\n            `mathBlock-${document.getElementsByClassName('mathBlock').length + 1}`);\n        const id = mathBlock.id;\n        mathBlock.setAttribute(\"class\", 'mathBlock');\n\n        //Added event listener for when you exit out of math block using arrow\n        //key\n        mathBlock.addEventListener('focus-out', (ev) => {\n            if (ev.detail.direction === \"forward\") {\n\n                document.getElementById('editor').focus();\n                var next_line = document.getElementById('editor');\n                format(\n                    'insert',\n                    `<pre class='editor' id='${next_line}'</pre>`\n                );\n            } else if (ev.detail.direction === \"backward\") {\n                document.getElementById('editor').focus();\n            }\n        });\n\n        //Event Listener to change math block value when there is user input\n        mathBlock.addEventListener('input', (ev) => {\n            mathBlock.setValue(ev.target.value);\n        })\n\n        const target = document.getSelection();\n\n        //Checking if valid location to place a math block\n        if (\n            target.focusNode.nodeName.includes('#text') ||\n            target.focusNode.classList.contains('title') ||\n            target.focusNode.className.includes('mathBlock')\n        ) {\n            return\n        }\n\n        //Focuses back on editor, and then inserts a block at\n        //the cursor using added function insertBlockAtCursor\n        const ellie = document.getElementById('editor');\n        document.getElementById('editor').focus();\n        insertBlockAtCursor(mathBlock, target);\n\n        /*\n            //Block of comments to test out different methods of inserting\n            //blocks and text elements\n\n            //const texty = document.createTextNode(\"hello world!\");\n            //const spanny = document.createElement('span');\n            //const t = document.createTextNode(\"This is a span element\");\n            //spanny.appendChild(t);\n            //ellie.appendChild(spanny);\n            //document.body.appendChild(spanny);\n            //insertTextAtCaret(spanny);\n\n        */\n        document.getElementById(id).focus();\n        /* Original format/executeCommand function. Does not appear to\n            be functional in the context of a <math-field> element\n        format('insert',\n                    `<pre class=\"mathBlock\" id=\"${id}\">${target}</pre>`\n                );\n        */\n\n        //If you comment out this line suddenly allows text editing to\n        //the right of the math field. Will hold off on text to side of\n        //until inline equation is figured out\n        addLineAfterBlock(id);\n\n    }\n\n\n    //Method to handle Tab and Enter button press (Emily)\n    function keyHandle(evt) {\n        const key = evt.keyCode;\n        switch (key) {\n            case 9: //Tab\n                insertTextAtCursor('\\t');\n                evt.preventDefault();\n                break;\n            case 13: //Enter\n                insertTextAtCursor('\\n');\n                evt.preventDefault();\n                break;\n        }\n    }\n\n    //Inserts text block at current cursor position (Emily)\n    function insertTextAtCursor(text) {\n        var sel, range;\n        sel = window.getSelection();\n        range = sel.getRangeAt(0);\n        range.deleteContents();\n        range.insertNode(document.createTextNode(text));\n    }\n\n    //Inserts an inline-block element at current cursor position (Emily)\n    function insertBlockAtCursor(block, target) {\n        var range;\n        range = target.getRangeAt(0);\n        range.deleteContents();\n        range.insertNode(block);\n    }\n\n    //Experiment method to perform a different text insertion at cursor (Emily)\n    function insertTextAtCaret(text) {\n        var sel, range;\n        if (window.getSelection) {\n            sel = window.getSelection();\n            if (sel.getRangeAt && sel.rangeCount) {\n                range = sel.getRangeAt(0);\n                range.deleteContents();\n                range.insertNode(document.createTextNode(text));\n            }\n        } else if (document.selection && document.selection.createRange) {\n            document.selection.createRange().text = text;\n        }\n    }\n\n    //Save selection before you insert an element (Emily)\n    function saveSelection(sel) {\n        if (window.getSelection) {\n            sel = window.getSelection();\n            if (sel.getRangeAt && sel.rangeCount) {\n                return sel.getRangeAt(0);\n            }\n        } else if (document.selection && document.selection.createRange) {\n            return document.selection.createRange();\n        }\n        return null;\n    }\n\n    //Restore the previously saved selection (Emily)\n    function restoreSelection(range, sel) {\n        if (range) {\n            if (window.getSelection) {\n                sel = window.getSelection();\n                sel.removeAllRanges();\n                sel.addRange(range);\n            } else if (document.selection && range.select) {\n                range.select();\n            }\n        }\n    }\n\n    //Insert HTML directly at caret position. Basically another\n    //experimental method to test out insertion of elements at\n    //cursor in doc (Emily)\n    function pasteHtmlAtCaret(html, selectPastedContent) {\n        var sel, range;\n        if (window.getSelection) {\n            // IE9 and non-IE\n            sel = window.getSelection();\n            if (sel.getRangeAt && sel.rangeCount) {\n                range = sel.getRangeAt(0);\n                range.deleteContents();\n\n                // Range.createContextualFragment() would be useful here but is\n                // only relatively recently standardized and is not supported in\n                // some browsers (IE9, for one)\n                var el = document.createElement(\"div\");\n                el.innerHTML = html;\n                var frag = document.createDocumentFragment(), node, lastNode;\n                while ((node = el.firstChild)) {\n                    lastNode = frag.appendChild(node);\n                }\n                var firstNode = frag.firstChild;\n                range.insertNode(frag);\n\n                // Preserve the selection\n                if (lastNode) {\n                    range = range.cloneRange();\n                    range.setStartAfter(lastNode);\n                    if (selectPastedContent) {\n                        range.setStartBefore(firstNode);\n                    } else {\n                        range.collapse(true);\n                    }\n                    sel.removeAllRanges();\n                    sel.addRange(range);\n                }\n            }\n        } else if ((sel = document.selection) && sel.type !== \"Control\") {\n            // IE < 9\n            var originalRange = sel.createRange();\n            originalRange.collapse(true);\n            sel.createRange().pasteHTML(html);\n            if (selectPastedContent) {\n                range = sel.createRange();\n                range.setEndPoint(\"StartToStart\", originalRange);\n                range.select();\n            }\n        }\n    }\n\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n\n\n\n    //Temporary code for storing title and content into a txt file\n    function handleSave() {\n        const content = document.getElementById('editor').innerHTML;\n        const title = document.getElementById('title').textContent;\n\n        let data =\n            '\\r' + title + ' \\r\\n' +\n            '\\r\\n' + content + ' \\r\\n';\n        const textToBLOB = new Blob([data], { type: 'text/plain' });\n        const sFileName = 'noteOutput.txt';\n\n        let newLink = document.createElement(\"a\");\n        newLink.download = sFileName;\n        if (window.webkitURL != null) {\n            newLink.href = window.webkitURL.createObjectURL(textToBLOB);\n        }\n        else {\n            newLink.href = window.URL.createObjectURL(textToBLOB);\n            newLink.style.display = \"none\";\n            document.body.appendChild(newLink);\n        }\n\n        newLink.click();\n    }\n    function bulletPoint(){\n        format('insertHTML',`<ol><li class=\"bullet\"></li></ol>`);\n        \n    }\n\n    return (\n        <div className='toolbar'>\n            <div class=\"tooltip\">\n                <span class=\"tooltiptext\">Bold</span>\n                <button onClick={e => format('bold')}>\n                    <Icon icon={bold} />\n                </button>\n            </div>\n            <div class=\"tooltip\">\n                <span class=\"tooltiptext\">Italicize</span>\n                <button onClick={e => format('italic')}>\n                    <Icon icon={italic} />\n                </button>\n            </div>\n            <div class=\"tooltip\">\n                <span class=\"tooltiptext\">List</span>\n                <button onClick={e => bulletPoint()}>\n                    <Icon icon={list} />\n                </button>\n            </div>\n            <div class=\"tooltip\">\n                <span class=\"tooltiptext\">Hyperlink</span>\n                <button onClick={e => addLink()}>\n                    <Icon icon={link} />\n                </button>\n            </div>\n\n            <div id='url-input' className='hidden'>\n                <input id='textFormatUrl' placeholder='url' />\n                <button onClick={e => setUrl(e)}>\n                    <Icon icon={check} />\n                </button>\n            </div>\n            <div class=\"tooltip\">\n                <span class=\"tooltiptext\">Header</span>\n                <button onClick={e => setHeader()}>\n                    <Icon icon={header} />\n                </button>\n            </div>\n            <div class=\"tooltip\">\n                <span class=\"tooltiptext\">Code Block</span>\n                <button onClick={e => addCodeBlock(lang)}>\n                    <Icon icon={code} />\n                </button>\n            </div>\n            <div class=\"tooltip\">\n                <span class=\"tooltiptext\">Equation</span>\n                <button onClick={e => addEquation()}>\n                    <Icon icon={plus} />\n                </button>\n            </div>\n            <div class=\"tooltip\">\n                <span class=\"tooltiptext\">Save</span>\n                <button onClick={e => handleSave()}>\n                    <Icon icon={download} />\n                </button>\n            </div>\n            <button onClick={e => openMenu()}>\n                Language for CodeBlock\n                <ul id=\"dropdown\">\n                    <li onClick={e => updateLang(\"javascript\")} >Javascript</li>\n                    <li onClick={e => updateLang(\"java\")}>Java</li>\n                    <li onClick={e => updateLang(\"python\")}>Python</li>\n                    <li onClick={e => updateLang(\"c_cpp\")}>C++</li>\n                </ul>\n            </button>\n            \n        </div>\n    )\n}","/home/maslin/Documents/School/CS380/Project/note-flow/src/components/SignOut/index.js",[],{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":2,"column":8,"nodeType":"103","messageId":"104","endLine":2,"endColumn":16},{"ruleId":"101","severity":1,"message":"105","line":3,"column":10,"nodeType":"103","messageId":"104","endLine":3,"endColumn":25},{"ruleId":"101","severity":1,"message":"106","line":5,"column":10,"nodeType":"103","messageId":"104","endLine":5,"endColumn":20},{"ruleId":"101","severity":1,"message":"107","line":33,"column":13,"nodeType":"103","messageId":"104","endLine":33,"endColumn":21},{"ruleId":"101","severity":1,"message":"108","line":15,"column":10,"nodeType":"103","messageId":"104","endLine":15,"endColumn":28},{"ruleId":"101","severity":1,"message":"109","line":16,"column":8,"nodeType":"103","messageId":"104","endLine":16,"endColumn":16},{"ruleId":"101","severity":1,"message":"110","line":17,"column":10,"nodeType":"103","messageId":"104","endLine":17,"endColumn":19},{"ruleId":"101","severity":1,"message":"111","line":123,"column":15,"nodeType":"103","messageId":"104","endLine":123,"endColumn":24},{"ruleId":"101","severity":1,"message":"112","line":135,"column":13,"nodeType":"103","messageId":"104","endLine":135,"endColumn":22},{"ruleId":"101","severity":1,"message":"113","line":142,"column":13,"nodeType":"103","messageId":"104","endLine":142,"endColumn":24},{"ruleId":"101","severity":1,"message":"114","line":157,"column":14,"nodeType":"103","messageId":"104","endLine":157,"endColumn":25},{"ruleId":"101","severity":1,"message":"111","line":158,"column":15,"nodeType":"103","messageId":"104","endLine":158,"endColumn":24},{"ruleId":"101","severity":1,"message":"115","line":159,"column":15,"nodeType":"103","messageId":"104","endLine":159,"endColumn":21},{"ruleId":"101","severity":1,"message":"116","line":259,"column":15,"nodeType":"103","messageId":"104","endLine":259,"endColumn":20},{"ruleId":"101","severity":1,"message":"117","line":293,"column":14,"nodeType":"103","messageId":"104","endLine":293,"endColumn":23},{"ruleId":"118","severity":1,"message":"119","line":295,"column":9,"nodeType":"120","messageId":"121","endLine":304,"endColumn":10},{"ruleId":"101","severity":1,"message":"122","line":325,"column":14,"nodeType":"103","messageId":"104","endLine":325,"endColumn":31},{"ruleId":"101","severity":1,"message":"123","line":340,"column":14,"nodeType":"103","messageId":"104","endLine":340,"endColumn":27},{"ruleId":"101","severity":1,"message":"124","line":353,"column":14,"nodeType":"103","messageId":"104","endLine":353,"endColumn":30},{"ruleId":"101","severity":1,"message":"125","line":368,"column":14,"nodeType":"103","messageId":"104","endLine":368,"endColumn":30},"no-native-reassign",["126"],"no-negated-in-lhs",["127"],"no-unused-vars","'firebase' is defined but never used.","Identifier","unusedVar","'FirebaseContext' is defined but never used.","'SignUpLink' is defined but never used.","'username' is assigned a value but never used.","'MathfieldComponent' is defined but never used.","'Mathlive' is defined but never used.","'Mathfield' is defined but never used.","'codeBlock' is assigned a value but never used.","'new_block' is assigned a value but never used.","'code_editor' is assigned a value but never used.","'deleteBlock' is defined but never used.","'target' is assigned a value but never used.","'ellie' is assigned a value but never used.","'keyHandle' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'insertTextAtCaret' is defined but never used.","'saveSelection' is defined but never used.","'restoreSelection' is defined but never used.","'pasteHtmlAtCaret' is defined but never used.","no-global-assign","no-unsafe-negation"]