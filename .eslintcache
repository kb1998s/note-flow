[{"/home/maslin/Documents/School/CS380/Project/note-flow/src/index.js":"1","/home/maslin/Documents/School/CS380/Project/note-flow/src/App.js":"2","/home/maslin/Documents/School/CS380/Project/note-flow/src/reportWebVitals.js":"3","/home/maslin/Documents/School/CS380/Project/note-flow/src/components/Firebase/index.js":"4","/home/maslin/Documents/School/CS380/Project/note-flow/src/components/editor/Editor.js":"5","/home/maslin/Documents/School/CS380/Project/note-flow/src/components/navigation/Navigation.js":"6","/home/maslin/Documents/School/CS380/Project/note-flow/src/components/Firebase/context.js":"7","/home/maslin/Documents/School/CS380/Project/note-flow/src/components/Firebase/firebase.js":"8","/home/maslin/Documents/School/CS380/Project/note-flow/src/components/navigation/routes.js":"9","/home/maslin/Documents/School/CS380/Project/note-flow/src/components/toolbar/Toolbar.js":"10"},{"size":766,"mtime":1611700362863,"results":"11","hashOfConfig":"12"},{"size":612,"mtime":1611700362859,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1611267265659,"results":"14","hashOfConfig":"12"},{"size":131,"mtime":1611700362859,"results":"15","hashOfConfig":"12"},{"size":849,"mtime":1611700362859,"results":"16","hashOfConfig":"12"},{"size":490,"mtime":1611700362859,"results":"17","hashOfConfig":"12"},{"size":203,"mtime":1611700362859,"results":"18","hashOfConfig":"12"},{"size":614,"mtime":1611700362859,"results":"19","hashOfConfig":"12"},{"size":286,"mtime":1611700362863,"results":"20","hashOfConfig":"12"},{"size":4325,"mtime":1611785557858,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"sq7z4w",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},"/home/maslin/Documents/School/CS380/Project/note-flow/src/index.js",[],["44","45"],"/home/maslin/Documents/School/CS380/Project/note-flow/src/App.js",[],"/home/maslin/Documents/School/CS380/Project/note-flow/src/reportWebVitals.js",[],"/home/maslin/Documents/School/CS380/Project/note-flow/src/components/Firebase/index.js",[],"/home/maslin/Documents/School/CS380/Project/note-flow/src/components/editor/Editor.js",[],"/home/maslin/Documents/School/CS380/Project/note-flow/src/components/navigation/Navigation.js",[],"/home/maslin/Documents/School/CS380/Project/note-flow/src/components/Firebase/context.js",[],"/home/maslin/Documents/School/CS380/Project/note-flow/src/components/Firebase/firebase.js",[],"/home/maslin/Documents/School/CS380/Project/note-flow/src/components/navigation/routes.js",[],"/home/maslin/Documents/School/CS380/Project/note-flow/src/components/toolbar/Toolbar.js",["46"],"import React from 'react'\nimport './Toolbar.css'\n\nimport Icon from 'react-icons-kit'\nimport { bold } from 'react-icons-kit/iconic/bold'\nimport { italic } from 'react-icons-kit/iconic/italic'\nimport { list } from 'react-icons-kit/iconic/list'\nimport { link } from 'react-icons-kit/iconic/link'\nimport { check } from 'react-icons-kit/iconic/check'\nimport { header } from 'react-icons-kit/iconic/header'\nimport { code } from 'react-icons-kit/iconic/code'\nimport { plus } from 'react-icons-kit/iconic/plus'\nimport { download } from 'react-icons-kit/iconic/download'\n\n\nexport default function Toolbar() {\n\n    //TODO: Populate these methods\n    function format(com, val) {\n        document.execCommand(com, false, val);\n    }\n    function addLink() {\n        const show = document.getElementById('url-input');\n        if (show.classList.contains('hidden')) {\n            show.classList.remove('hidden');\n        } else {\n            show.classList.add('hidden');\n        }\n    }\n\n\n    function setUrl(e) {\n        e.preventDefault()\n        const url = document.getElementById('txtFormatUrl').value;\n        const show = document.getElementById('url-input');\n        const text = document.getSelection();\n        format(\n            'insertHTML',\n            `<a href='${url}' target='_blank'>${text}\n            </a>`\n        );\n        document.getElementById('txtFormatUrl').value = '';\n        show.classList.add('hidden');\n    }\n\n    function setHeader() {\n        const target = document.getSelection();\n        format('insertHTML', `<h2>${target}</h2>`);\n    }\n\n    //Vito's working on this method\n    function addCodeBlock() {\n        try {\n            const codeBlock = document.createElement('pre');\n            const target = document.getSelection();\n            if (\n                target.focusNode.nodeName.includes('#text') ||\n                target.focusNode.classList.contains('title') ||\n                target.focusNode.className.includes('codeBlock')\n            ) {\n                return\n            }\n            const id = `codeBlock-${document.getElementsByClassName('codeBlock').length + 1}`;\n            codeBlock.classList.add('codeBlock')\n\n            format(\n                'insertHTML',\n                `<pre class='codeBlock' id='${id}'>${target}</pre>`\n            );\n            addLineAfterBlock(id)\n        } catch {\n            document.getElementById('editor').innerHTML = \"Please select the editor area before using this function!\"\n        }\n    }\n    function addLineAfterBlock(id) {\n        const block = document.getElementById(`${id}`);\n        const div = document.createElement('div');\n        const br = document.createElement('br');\n\n        div.appendChild(br);\n        if (!block) {\n            return;\n        } else {\n            block.after(div);\n        }\n    }\n\n    //Someone is researching this one I think\n    function addEquation() { }\n\n    //Zach handling saving method\n    function handleSave() { }\n    /**\n     * Use icons from react-icons-kit for the toolbar instead of win98 buttons for the toolbar\n     * this will require npm add react-icons-kit\n     */\n    return (\n        <div className='toolbar'>\n            <button onClick={e => format('bold')}>\n                <Icon icon={bold} />\n            </button>\n            <button onClick={e => format('italic')}>\n                <Icon icon={italic} />\n            </button>\n            <button onClick={e => format('insertUnorderedList')}>\n                <Icon icon={list} />\n            </button>\n\n            <button onClick={e => addLink()}>\n                <Icon icon={link} />\n            </button>\n            <div id='url-input' className='hidden'>\n                <input id='textFormatUrl' placeholder='url' />\n                <button onClick=\"setUrl(e)\">\n                    <Icon icon={check} />\n                </button>\n            </div>\n            <button onClick={e => setHeader()}>\n                <Icon icon={header} />\n            </button>\n            <button onClick={e => addCodeBlock()}>\n                <Icon icon={code} />\n            </button>\n            <button onClick={e => addEquation()}>\n                <Icon icon={plus} />\n            </button>\n            <button onClick={e => handleSave()}>\n                <Icon icon={download} />\n            </button>\n        </div>\n    )\n}",{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":32,"column":14,"nodeType":"53","messageId":"54","endLine":32,"endColumn":20},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-unused-vars","'setUrl' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]